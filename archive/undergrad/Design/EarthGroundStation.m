clear ; close all ; clc ;
satSeen = readmatrix( 'EarthGroundStation2.txt' ) ;
satSeenMod = satSeen( : , 1:32 ) ;

t = [0;0.00347222200000000;0.00694444400000000;0.0104166670000000;0.0138888890000000;0.0173611110000000;0.0208333330000000;0.0243055560000000;0.0277777780000000;0.0312500000000000;0.0347222220000000;0.0381944440000000;0.0416666670000000;0.0451388890000000;0.0486111110000000;0.0520833330000000;0.0555555560000000;0.0590277780000000;0.0625000000000000;0.0659722220000000;0.0694444440000000;0.0729166670000000;0.0763888890000000;0.0798611110000000;0.0833333330000000;0.0868055560000000;0.0902777780000000;0.0937500000000000;0.0972222220000000;0.100694444000000;0.104166667000000;0.107638889000000;0.111111111000000;0.114583333000000;0.118055556000000;0.121527778000000;0.125000000000000;0.128472222000000;0.131944444000000;0.135416667000000;0.138888889000000;0.142361111000000;0.145833333000000;0.149305556000000;0.152777778000000;0.156250000000000;0.159722222000000;0.163194444000000;0.166666667000000;0.170138889000000;0.173611111000000;0.177083333000000;0.180555556000000;0.184027778000000;0.187500000000000;0.190972222000000;0.194444444000000;0.197916667000000;0.201388889000000;0.204861111000000;0.208333333000000;0.211805556000000;0.215277778000000;0.218750000000000;0.222222222000000;0.225694444000000;0.229166667000000;0.232638889000000;0.236111111000000;0.239583333000000;0.243055556000000;0.246527778000000;0.250000000000000;0.253472222000000;0.256944444000000;0.260416667000000;0.263888889000000;0.267361111000000;0.270833333000000;0.274305556000000;0.277777778000000;0.281250000000000;0.284722222000000;0.288194444000000;0.291666667000000;0.295138889000000;0.298611111000000;0.302083333000000;0.305555556000000;0.309027778000000;0.312500000000000;0.315972222000000;0.319444444000000;0.322916667000000;0.326388889000000;0.329861111000000;0.333333333000000;0.336805556000000;0.340277778000000;0.343750000000000;0.347222222000000;0.350694444000000;0.354166667000000;0.357638889000000;0.361111111000000;0.364583333000000;0.368055556000000;0.371527778000000;0.375000000000000;0.378472222000000;0.381944444000000;0.385416667000000;0.388888889000000;0.392361111000000;0.395833333000000;0.399305556000000;0.402777778000000;0.406250000000000;0.409722222000000;0.413194444000000;0.416666667000000;0.420138889000000;0.423611111000000;0.427083333000000;0.430555556000000;0.434027778000000;0.437500000000000;0.440972222000000;0.444444444000000;0.447916667000000;0.451388889000000;0.454861111000000;0.458333333000000;0.461805556000000;0.465277778000000;0.468750000000000;0.472222222000000;0.475694444000000;0.479166667000000;0.482638889000000;0.486111111000000;0.489583333000000;0.493055556000000;0.496527778000000;0.500000000000000;0.503472222000000;0.506944444000000;0.510416667000000;0.513888889000000;0.517361111000000;0.520833333000000;0.524305556000000;0.527777778000000;0.531250000000000;0.534722222000000;0.538194444000000;0.541666667000000;0.545138889000000;0.548611111000000;0.552083333000000;0.555555556000000;0.559027778000000;0.562500000000000;0.565972222000000;0.569444444000000;0.572916667000000;0.576388889000000;0.579861111000000;0.583333333000000;0.586805556000000;0.590277778000000;0.593750000000000;0.597222222000000;0.600694444000000;0.604166667000000;0.607638889000000;0.611111111000000;0.614583333000000;0.618055556000000;0.621527778000000;0.625000000000000;0.628472222000000;0.631944444000000;0.635416667000000;0.638888889000000;0.642361111000000;0.645833333000000;0.649305556000000;0.652777778000000;0.656250000000000;0.659722222000000;0.663194444000000;0.666666667000000;0.670138889000000;0.673611111000000;0.677083333000000;0.680555556000000;0.684027778000000;0.687500000000000;0.690972222000000;0.694444444000000;0.697916667000000;0.701388889000000;0.704861111000000;0.708333333000000;0.711805556000000;0.715277778000000;0.718750000000000;0.722222222000000;0.725694444000000;0.729166667000000;0.732638889000000;0.736111111000000;0.739583333000000;0.743055556000000;0.746527778000000;0.750000000000000;0.753472222000000;0.756944444000000;0.760416667000000;0.763888889000000;0.767361111000000;0.770833333000000;0.774305556000000;0.777777778000000;0.781250000000000;0.784722222000000;0.788194444000000;0.791666667000000;0.795138889000000;0.798611111000000;0.802083333000000;0.805555556000000;0.809027778000000;0.812500000000000;0.815972222000000;0.819444444000000;0.822916667000000;0.826388889000000;0.829861111000000;0.833333333000000;0.836805556000000;0.840277778000000;0.843750000000000;0.847222222000000;0.850694444000000;0.854166667000000;0.857638889000000;0.861111111000000;0.864583333000000;0.868055556000000;0.871527778000000;0.875000000000000;0.878472222000000;0.881944444000000;0.885416667000000;0.888888889000000;0.892361111000000;0.895833333000000;0.899305556000000;0.902777778000000;0.906250000000000;0.909722222000000;0.913194444000000;0.916666667000000;0.920138889000000;0.923611111000000;0.927083333000000;0.930555556000000;0.934027778000000;0.937500000000000;0.940972222000000;0.944444444000000;0.947916667000000;0.951388889000000;0.954861111000000;0.958333333000000;0.961805556000000;0.965277778000000;0.968750000000000;0.972222222000000;0.975694444000000;0.979166667000000;0.982638889000000;0.986111111000000;0.989583333000000;0.993055556000000;0.996527778000000] ;
n = 2 ; % number of points
T = 32 ; % number of satellites
satGround = zeros( 288 , T , n ) ;
for kk = 1:n
    for ii = 1:T 
        for jj = 1:288
            offset = (kk-1)*2880 ;
            satGround(jj,ii,kk) = satSeen( jj + offset , ii ) ;
        end
    end
end

for ii = 1:n
    [ I , J ] =  find( satGround(:,:,ii) == 1 ) ; 
    for jj = 1:T 
        start = min( find( J == jj ) ) ;
        kk = 0 ;
        visTime(ii,jj) = 0 ;
        dif = abs( I(kk+start+1) - I(kk+start) ) ;
        while dif < 2
            visTime(ii,jj) = 300 + visTime(ii,jj) ;
            if kk + start + 1 <= length(I)
                dif = abs( I(kk+start+1) - I(kk+start) ) ;
            else 
                dif = 2 ;
            end
            kk = kk + 1 ;
        end
        if kk ~= 0 
            if kk + start + 1 < length( I )
                visTime2(ii,jj) = 0 ;
                if J(kk+start) == jj
                    start2 = start + kk ;
                    kk = 0 ;
                    dif = abs( I(kk+start2+1) - I(kk+start2) ) ;
                    while dif < 2
                        visTime2(ii,jj) = 300 + visTime2(ii,jj) ;
                        if kk + start2 + 1 <= length(I)
                            dif = abs( I(kk+start2+1) - I(kk+start2) ) ;
                        else
                            dif = 2 ;
                        end
                        kk = kk + 1 ;
                    end
                end
            else
                visTime2(ii,jj) = 0 ;
            end
        else
            visTime2(ii,jj) = 0 ;
        end
        
        if visTime2(ii,jj) > visTime(ii,jj)
            visTime(ii,jj) = visTime2(ii,jj) ;
        end
    end
end

for ii = 1:288
    for jj = 1:32
        Covered(ii,jj) = max( satGround(ii,jj,:) ) ;
    end
end
ii = 1 ;
    [ I , J ] = find( Covered == 0 ) ;
    for jj = 1:T 
        start = min( find( J == jj ) ) ;
        kk = 0 ;
        UncoveredTime(ii,jj) = 0 ;
        dif = abs( I(kk+start+1) - I(kk+start) ) ;
        while dif < 2
            UncoveredTime(ii,jj) = 300 + UncoveredTime(ii,jj) ;
            if kk + start + 1 <= length(I)
                dif = abs( I(kk+start+1) - I(kk+start) ) ;
            else 
                dif = 2 ;
            end
            kk = kk + 1 ;
        end
        if kk ~= 0 
            if kk + start + 1 < length( I )
                UncoveredTime2(ii,jj) = 0 ;
                if J(kk+start) == jj
                    start2 = start + kk ;
                    kk = 0 ;
                    dif = abs( I(kk+start2+1) - I(kk+start2) ) ;
                    while dif < 2
                        UncoveredTime2(ii,jj) = 300 + UncoveredTime2(ii,jj) ;
                        if kk + start2 + 1 <= length(I)
                            dif = abs( I(kk+start2+1) - I(kk+start2) ) ;
                        else
                            dif = 2 ;
                        end
                        kk = kk + 1 ;
                    end
                end
            else
                UncoveredTime2(ii,jj) = 0 ;
            end
        else
            UncoveredTime2(ii,jj) = 0 ;
        end
        
        if UncoveredTime2(ii,jj) > UncoveredTime(ii,jj)
            UncoveredTime(ii,jj) = UncoveredTime2(ii,jj) ;
        end
    end
    
    figure
    plot( UncoveredTime/3600 )
% 
% for ii = 1:T
%     timeOverPoint(ii) = prctile( visTime(:,ii) , 75 ) ;
% end
% for ii = 1:n
%     timeSatPass(ii) = prctile( visTime(ii,:) , 75 ) ;
% end
% 
% % ii = points, jj = satellites
% points = 1:n ;
% sats = 1:T ;
% 
% figure
% plot( timeOverPoint )
% 
% figure
% plot( timeSatPass )
% 
% while (1)
%     fprintf('Please input point of Interest\n');
% 
%     point = input('? ');
% 
%     if isempty( point )
%     else
%         if point == 'q'
%             break ;
%         else
% 
%             med = median( visTime(point,:)/60 ) ;
%             sev = prctile( visTime(point,:)/60,75 ) ;
%             twe = prctile( visTime(point,:)/60,25 ) ;
%             medLine = [med,med] ;
%             sevLine = [sev,sev] ;
%             tweLine = [twe,twe] ;
% 
%             figure
%             hold on
%             plot( [0,T] , sevLine , 'b')
%             plot( [0,T] , medLine , 'm')
%             plot( [0,T] , tweLine , 'r')
%             for ii = 1:T
%                     plot( sats(ii) , visTime(point,ii)./60 , '.k' ) 
%             end
%             legend( '75th percentile' , '50th percentile' , '25th percentile' , 'Pass Time' )
%             hold off
%             xlabel( 'Satellite' )
%             ylabel( 'Pass Time [minute]' )
%         end
%     end
% end
% 
% 
% 
